package big_O_1;

public class big_O_ex9 {
	// 균형 이진 탐색 트리에서 모든 노드의 값을 더하는 코드이다. 수행시간은 어떻게 되겠는가?
	/*노드가 구현되어 있지 않아 오류가 나기 때문에 주석처리 하였다.
	
	int sum(Node node) {
		if(node == null) {
			return 0;
		}
		return sum(node.left) + node.value + sum(node.right);
	}
	*/
}





/*
주의) 단지 이진 탐색 트리라는 이유로 로그가 들어갈 거라 생각하지 말아라!
 1) 코드가 무엇을 의미하는 가(가장 간단한 방법)
이 코드는 트리의 각 노드를 한번 씩 방문한 뒤 각 노드에서(재귀 호출 부분은 제외하고) 상수 시간에 해당하는 일을 수행한다.
따라서, 수행 시간은 노드의 개수와 선형 관계에 있다. 즉, N개의 노드가 있을 때 수행시간은 O(N)이 된다.

 2) 재귀호출 패턴분석
 재귀함수에 분기가 여러 개 존재할 경우 수행 시간은 일반적으로 O(분기^깊이)가 된다. 만약 분기가 두 개 존재한다면 O(2^깊이)가 될 것이다.
 깊이는 어떻게 되는가? 여기 나온 트리는 균형 이진 탐색 트리다. 즉, 총 N개의 노드가 있다면 깊이는 대략 logN이 된다.
 즉, 수행시간은 O(2^logN)이 된다. P = 2^logN 이라 한다면 P=N이 된다. 결과적으로 O(N)의 수행시간이 된다.

*/
